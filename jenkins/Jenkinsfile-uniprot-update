import groovy.json.JsonSlurper
// This Jenkinsfile is used by Jenkins to run the 'UniProtUpdate' step of Reactome's release.
// This step synchronizes Reactome's GO terms with Gene Ontology. 
// It requires that the 'ConfirmReleaseConfigs' step has been run successfully before it can be run.
def currentRelease
def previousRelease
pipeline {
	agent any

	stages {
		// This stage checks that an upstream step, ConfirmReleaseConfigs, was run successfully.
		stage('Check ConfirmReleaseConfigs build succeeded'){
			steps{
				script{
					// Get current release number from directory
					currentRelease = (pwd() =~ /(\d+)\//)[0][1];
					previousRelease = (pwd() =~ /(\d+)\//)[0][1].toInteger() - 1;
					// This queries the Jenkins API to confirm that the most recent build of ConfirmReleaseConfigs was successful.
					def configStatusUrl = httpRequest authentication: 'jenkinsKey', validResponseCodes: "${env.VALID_RESPONSE_CODES}", url: "${env.JENKINS_JOB_URL}/job/${currentRelease}/job/ConfirmReleaseConfigs/lastBuild/api/json"
					if (configStatusUrl.getStatus() == 404) {
						error("ConfirmReleaseConfigs has not yet been run. Please complete a successful build.")
					} else {
						def configStatusJson = new JsonSlurper().parseText(configStatusUrl.getContent())
						if (configStatusJson['result'] != "SUCCESS"){
							error("Most recent ConfirmReleaseConfigs build status: " + configStatusJson['result'] + ". Please complete a successful build.")
						}
					}
				}
			}
		}
		/*
		// This stage backs up the gk_central database before it is modified.
		stage('Setup: Back up gk_central before modifications'){
			steps{
				script{
					withCredentials([usernamePassword(credentialsId: 'mySQLCuratorUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
						def central_before_uniprot_update_dump = "${env.GK_CENTRAL}_${currentRelease}_before_uniprot_update.dump"
						sh "mysqldump -u$user -p$pass -h${env.CURATOR_SERVER} ${env.GK_CENTRAL} > $central_before_uniprot_update_dump"
						sh "gzip -f $central_before_uniprot_update_dump"
					}
				}
			}
		}
		// Download uniprot_sprot.xml.gz and uniprot-reviewed:no.list.gz from UniProt.
		stage('Setup: Download uniprot_sprot.xml.gz and uniprot-reviewed:no.list.gz'){
			steps{
				script{
					sh "wget -q -N ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.xml.gz"
					sh "wget -q -O uniprot-reviewed:no.list.gz 'http://www.uniprot.org/uniprot/?query=reviewed%3Ano&compress=yes&format=list'"
				}
			}
		}
		// This stage executes the UniProtUpdate Perl script. 
		stage('Main: UniProt Update'){
			steps {
				script{
					withCredentials([usernamePassword(credentialsId: 'mySQLCuratorUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
						sh "perl ${env.ABS_RELEASE_PATH}/uniprot_update/uniprot_xml2sql_isoform.pl -db ${env.GK_CENTRAL} -host ${env.CURATOR_SERVER} -user $user -pass $pass > uniprot.out 2> uniprot.err"
					}
				}
			}
		}
		// This stage backs up the gk_central database after modification.
		stage('Post: Backup gk_central after modifications'){
			steps{
				script{
					withCredentials([usernamePassword(credentialsId: 'mySQLCuratorUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
						def central_after_update_uniprot_update_dump = "${env.GK_CENTRAL}_${currentRelease}_after_uniprot_update.dump"
						sh "mysqldump -u$user -p$pass -h${env.CURATOR_SERVER} ${env.GK_CENTRAL} > $central_after_update_uniprot_update_dump"
						sh "gzip -f $central_after_update_uniprot_update_dump"
					}
				}
			}
		}
		*/
		// This stage archives the contents of the 'reports' folder generated by GO Update and sends them in an email to the default recipients list.
		stage('Post: Email UniProt.wiki file'){
			steps{
				script{
					emailext (
						body: "Hello,\n\nThis is an automated message from Jenkins regarding an update for v${currentRelease}. The UniProt Update step has completed. Please review the uniprot.wiki file attached to this email. If it looks correct, the contents of the file need to be uploaded to https://devwiki.reactome.org/index.php/Reports_Archive under 'UniProt Update Reports'. Please add the older UniProt report URL to the 'Archived reports' section of the page. If they don't look correct, please email the developer running Release. \n\nThanks!",
						to: '$DEFAULT_RECIPIENTS',
						from: "${env.JENKINS_RELEASE_EMAIL}",
						subject: "UniProt Update Reports for v${currentRelease}",
						attachmentsPattern: "**/uniprot.wiki"
					)
				}
			}
		}
	}
}
